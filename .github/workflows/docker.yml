name: Docker Build and Push

on:
  push:
    branches:
      - master
      - main
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build with Nix and Push to GitHub Container Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Nix cache
        if: github.event_name != 'pull_request'
        uses: cachix/cachix-action@v15
        with:
          name: bitcoin-augur
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: false
      
      - name: Build Docker image with Nix
        run: |
          echo "Building Docker image with Nix..."
          nix build .#docker -L
          echo "NIX_DOCKER_IMAGE=$(readlink -f result)" >> $GITHUB_ENV
      
      - name: Load Docker image
        run: |
          echo "Loading Docker image from Nix build..."
          docker load < ${{ env.NIX_DOCKER_IMAGE }}
          docker images bitcoin-augur-server
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Default tags
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for master branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Git SHA
            type=sha,prefix={{branch}}-,format=short
            # Date-based tag  
            type=raw,value={{date 'YYYYMMDD'}},enable={{is_default_branch}}
      
      - name: Tag and push Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Parse tags from metadata
          TAGS="${{ steps.meta.outputs.tags }}"
          
          # Tag and push each tag
          echo "$TAGS" | while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            echo "Tagging as $tag"
            docker tag bitcoin-augur-server:latest "$tag"
            docker push "$tag"
          done
      
  test-image:
    name: Test Docker Image
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Test published image
        run: |
          # Pull the image we just pushed
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest
          
          # Test basic functionality
          echo "Testing --version flag..."
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository }}:latest --version
          
          echo "Testing --help flag..."
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository }}:latest --help
          
          # Test running the server
          echo "Starting server..."
          docker run -d --name test-server \
            -p 8080:8080 \
            ${{ env.REGISTRY }}/${{ github.repository }}:latest
          
          # Wait for server to start
          sleep 10
          
          # Test endpoints
          echo "Testing /health endpoint..."
          curl -f http://localhost:8080/health || (docker logs test-server && exit 1)
          
          echo "Testing /fees/1 endpoint..."
          curl -f http://localhost:8080/fees/1 || (docker logs test-server && exit 1)
          
          # Clean up
          docker stop test-server
          docker rm test-server