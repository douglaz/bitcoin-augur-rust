name: Docker Build and Push

on:
  push:
    branches:
      - master
      - main
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build with Nix and Push to GitHub Container Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      
      - name: Build Docker image with Nix
        run: |
          echo "Building Docker image with Nix..."
          nix build .#docker -L
          echo "NIX_DOCKER_IMAGE=$(readlink -f result)" >> $GITHUB_ENV
      
      - name: Load Docker image
        run: |
          echo "Loading Docker image from Nix build..."
          docker load < ${{ env.NIX_DOCKER_IMAGE }}
          docker images bitcoin-augur-server
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Default tags
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for master branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Git SHA
            type=sha,prefix={{branch}}-,format=short
            # Date-based tag  
            type=raw,value={{date 'YYYYMMDD'}},enable={{is_default_branch}}
      
      - name: Tag and push Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Parse tags from metadata
          TAGS="${{ steps.meta.outputs.tags }}"
          
          # Tag and push each tag
          echo "$TAGS" | while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            echo "Tagging as $tag"
            docker tag bitcoin-augur-server:latest "$tag"
            docker push "$tag"
          done
      
  test-image:
    name: Test Docker Image
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    
    steps:
      - name: Test published image
        run: |
          # Pull the image we just pushed
          echo "Pulling image: ${{ env.REGISTRY }}/${{ github.repository }}:latest"
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest
          
          # Test basic functionality
          echo "Testing --version flag..."
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository }}:latest --version
          
          echo "Testing --help flag..."
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository }}:latest --help
          
          # Test running the server in test mode (no Bitcoin Core required)
          echo "Starting server in test mode..."
          docker run -d --name test-server \
            -p 8080:8080 \
            -e RUST_LOG=debug \
            ${{ env.REGISTRY }}/${{ github.repository }}:latest \
            --test-mode --use-mock-data
          
          # Show initial logs
          echo "Initial server logs:"
          docker logs test-server
          
          # Wait for server to be ready with retries
          echo "Waiting for server to be ready..."
          MAX_RETRIES=30
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ Server is ready after $((RETRY_COUNT + 1)) seconds"
              break
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Waiting for server... (attempt $RETRY_COUNT/$MAX_RETRIES)"
            sleep 1
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ Server failed to become ready after $MAX_RETRIES seconds"
            echo "Final server logs:"
            docker logs test-server
            echo ""
            echo "Container status:"
            docker ps -a | grep test-server
            echo ""
            echo "Testing direct curl to see response:"
            curl -v http://localhost:8080/health || true
            exit 1
          fi
          
          # Test endpoints
          echo "Testing /health endpoint..."
          curl -f http://localhost:8080/health || (echo "Health check failed"; docker logs test-server; exit 1)
          
          echo "Testing /fees/target/3 endpoint..."
          curl -f http://localhost:8080/fees/target/3 || (echo "Fees endpoint failed"; docker logs test-server; exit 1)
          
          echo "Testing /fees endpoint..."
          # The /fees endpoint may return 503 in test mode if no fee estimates are available
          response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/fees)
          if [ "$response_code" = "200" ] || [ "$response_code" = "503" ]; then
            echo "✅ /fees endpoint responded with $response_code (expected in test mode)"
          else
            echo "❌ /fees endpoint failed with unexpected code: $response_code"
            docker logs test-server
            exit 1
          fi
          
          # Show final logs for debugging
          echo "Final server logs:"
          docker logs --tail 20 test-server
          
          # Clean up
          echo "Cleaning up..."
          docker stop test-server
          docker rm test-server